###

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.

 

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false

Example 4:

Input: s = "([)]"
Output: false

Example 5:

Input: s = "{[]}"
Output: true

 

Constraints:

    1 <= s.length <= 104
    s consists of parentheses only '()[]{}'.


###


class Solution:
    def isValid(self, s: str) -> bool:
        
        matches = {"(": ")",
                   "{": "}",
                   "[": "]"}
        if len(s) % 2 == 1:
            return False
        else:
            left = []
            for c in s:
                if c in matches.keys():
                    left.append(c)
                elif matches[left[-1]] == c:
                    left.pop()
                else:
                    return False
            if len(left) == 0:
                return True
            else:
                return False
                
               
               
            
####

class Solution:
    def isValid(self, s: str) -> bool:
        
        while True:
            new = s.replace('()', '').replace('[]', '').replace('{}', '')
            print(new)
            if len(new) == len(s):
                return False
            if len(new) == 0:
                return True
            s = new
