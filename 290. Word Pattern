Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false

Example 4:

Input: pattern = "abba", s = "dog dog dog dog"
Output: false

 

Constraints:

    1 <= pattern.length <= 300
    pattern contains only lower-case English letters.
    1 <= s.length <= 3000
    s contains only lower-case English letters and spaces ' '.
    s does not contain any leading or trailing spaces.
    All the words in s are separated by a single space.

###

from collections import defaultdict
class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        list_s = s.split()
        n_s = []
        dic= defaultdict(set)
        if len(pattern) != len(list_s) or len(set(pattern)) != len(set(list_s)):
            return False
        for letter, word in zip(pattern, list_s):
            dic[letter].add(word)
            dic["w_" + word].add(letter)

        for i in dic.values():
            if len(i) > 1:
                return False
        return True
###

from collections import defaultdict
class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        list_s = s.split()
        n_s = []
        dic= defaultdict(set)
        if len(pattern) != len(list_s) or len(set(pattern)) != len(set(list_s)):
            return False
        for letter, word in zip(pattern, list_s):
            dic[letter].add(word)
        for i in pattern:
            word = dic[i].pop()    
            dic[i].add(word)
            n_s.append(word)
        if list_s == n_s:
            return True
        else:
            return False
