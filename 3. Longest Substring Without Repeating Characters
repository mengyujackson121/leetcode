Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Example 4:

Input: s = ""
Output: 0


###

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        longest = []
        for i,c in enumerate(s):
            keep = []
            keep.append(c)
            for j in s[i+1:]:
                if j not in keep:
                    keep.append(j)
                else:
                    break
            if len(keep) > len(longest):
                longest = keep
        return len(longest)
        
        ###
