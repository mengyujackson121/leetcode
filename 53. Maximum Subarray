Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:

Input: nums = [1]
Output: 1

Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23

 

Constraints:

    1 <= nums.length <= 105
    -104 <= nums[i] <= 104
###
answer = []
location = []
for i in range(len(nums)):
    if nums[i] > 0:
        location.append(i)
        print(location)
for start in location:
    print(f'{start=}')
    for end in location:
        if start <= end:
            print(f'{end=}')
            print(f'{sum(nums[start:end+1])}')
            answer.append(sum(nums[start:end+1]))
print(answer)

###
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        best_sums = []
        for i in nums:
            if len(best_sums) == 0:
                best_sums.append(i)
            elif best_sums[-1] > 0:
                best_sums.append(best_sums[-1] + i)
            else:
                best_sums.append(i)
        best = max(best_sums)
        return best
